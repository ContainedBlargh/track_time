#!/usr/bin/python3

from os import walk
from os.path import join as pjoin, getmtime as mtime, getctime as ctime
from subprocess import run
from shlex import split as sh_split
from datetime import datetime

def main():
    git_dts = []
    git_log = run(sh_split('bash -c "git log --date=iso"'), capture_output=True, text=True)
    stdout, stderr = (git_log.stdout, git_log.stderr)

    # if stderr is not None or stdout is None:
    #     print("err??")
    #     print(stderr)
    #     return

    for line in stdout.split("\n"):
        line = str(line).lower()
        if "date: " in line:
            split = line.split()
            if len(split) < 4:
                print(f"Error in line: {line}")
                print(split)
                continue
            time = split[-2].strip()
            date = split[-3].strip()
            parsed = datetime.strptime(date + "T" + time, "%Y-%m-%dT%H:%M:%S")
            git_dts.append(parsed.timestamp())

    os_dts = []

    def find_all_files(dirpath: str = "./"):
        acc = []
        for dirpath, dirnames, filenames in walk(dirpath):
            acc += [pjoin(dirpath, file) for file in filenames]
        return acc

    all_files = find_all_files()
    for file in all_files:
        os_dts.append(ctime(file))
        os_dts.append(mtime(file))

    dts = list(sorted(git_dts + os_dts))

    hour = 60 * 60
    prev = 0
    interval = False
    n = len(dts)
    zones = [[]]
    for i in range(n):
        dt = dts[i]
        if len(zones[-1]) == 0:
            zones[-1].append(dt)
            continue
        diff = dt - zones[-1][-1]
        if diff < hour or i == n - 1:
            zones[-1].append(dt)
        else:
            zones.append([dt])
    intervals = [(round(zone[0], 0), round(zone[-1], 0), round((zone[-1] - zone[0]) / hour, 2)) for zone in zones]
    total = sum(map(lambda p: p[-1], intervals))
    print("start,end,hours")
    intervals = [f"{datetime.fromtimestamp(start)},{datetime.fromtimestamp(end)},{t}" for (start, end, t) in intervals]
    print("\n".join(intervals))
    print(f"-,-,{total}\n")

main()